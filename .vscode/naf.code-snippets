{
	// Place your naf workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Create context provider": {
		"scope": "javascript,typescript",
		"prefix": "ctxt",
		"body": [
			"interface SnackableContextType {",
			"}",
			"",
			"const SnackableContext = createContext<SnackableContextType|undefined>(undefined);",
			"",
			"function SnackableContextProvider({children}:{children: ReactNode}){",
			"",
			"\tconst providerValue = {",
			"\t}",
			"",
			"\treturn <SnackableContext.Provider value={providerValue}>",
			"\t\t{children}",
			"\t</SnackableContext.Provider>",
			"}",
			"",
			"const useSnackable(): SnackableContextType => {",
			"\tconst context = useContext(SnackableContext);",
			"\treturn validateContext(context, 'useSnackable', 'SnackableContextProvider');",
			"}",
			"",
			"export {SnackableContextProvider, useSnackable};",
			"$2"
		],
		"description": "Create a context, its corresponding provider, and hook"
	}
}